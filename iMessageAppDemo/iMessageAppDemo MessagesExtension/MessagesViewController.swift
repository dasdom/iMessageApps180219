//
//  MessagesViewController.swift
//  iMessageAppDemo MessagesExtension
//
//  Created by dasdom on 14.02.18.
//  Copyright Â© 2018 dasdom. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        super.willBecomeActive(with: conversation)
        
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        
        setupViewController(with: presentationStyle)

    }
    
    private func removeAllChildViewControllers() {
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
       
        setupViewController(with: presentationStyle)
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    func setupViewController(with presentationStyle: MSMessagesAppPresentationStyle) {
        
        removeAllChildViewControllers()
        
        let controller: UIViewController
        switch presentationStyle {
        case .compact:
            let compactController = CompactStyleViewController()
            compactController.delegate = self
            controller = compactController
        case .expanded:
            controller = ExpandedStyleViewController()
        default:
            let compactController = CompactStyleViewController()
            compactController.presentationStyleString = ".transcript"
            controller = compactController
        }
        
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        NSLayoutConstraint.activate([
            controller.view.leftAnchor.constraint(equalTo: view.leftAnchor),
            controller.view.rightAnchor.constraint(equalTo: view.rightAnchor),
            controller.view.topAnchor.constraint(equalTo: view.topAnchor),
            controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            ])
        
        controller.didMove(toParentViewController: self)
    }
    
    override func contentSizeThatFits(_ size: CGSize) -> CGSize {
        return CGSize(width: size.width, height: 100)
    }
}

extension MessagesViewController: CompactStyleViewControllerProtocol {
    func controllerDidTapSend(_ controller: UIViewController, withImage image: UIImage) {
        
        let alternateLayout = MSMessageTemplateLayout()
        alternateLayout.image = image
        let uuidString = activeConversation!
            .localParticipantIdentifier.uuidString
        alternateLayout.caption = "Nachricht von $\(uuidString)"
        alternateLayout.imageTitle = "Image title"
        alternateLayout.imageSubtitle = "Image subtitle"

        alternateLayout.trailingCaption = "Trailing caption"
        alternateLayout.subcaption = "Subcaption"
        alternateLayout.trailingSubcaption = "Trailing subcaption"

        let layout: MSMessageLayout
        let showLiveTemplate = true
        if showLiveTemplate {
            layout = MSMessageLiveLayout(alternateLayout: alternateLayout)
        } else {
            layout = alternateLayout
        }
        
        let session = activeConversation?.selectedMessage?.session
        let message = MSMessage(session: session ?? MSSession())
        message.url = URL(string: "?foo")
        message.layout = layout
        
//        self.activeConversation?.insert(message) { error in
//            print(error as Any)
//        }
        
        self.activeConversation?.send(message) { error in
            print(error as Any)
        }
    }
}
